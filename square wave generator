const int outputPin = 9; // Digital pin where you want to generate the square wave
int dutyCycle = 20;     // Initial duty cycle (in percentage)

void setup() {
  pinMode(outputPin, OUTPUT);
  // Set up a Timer1 interrupt to generate the square wave
  TCCR1A = 0; // Set TCCR1A register to default
  TCCR1B = 0; // Set TCCR1B register to default
  TCNT1 = 0;  // Initialize the counter to 0
  OCR1A = 100; // Set the compare value to control the frequency
  TCCR1A |= (1 << COM1A0); // Toggle OC1A on compare match
  TCCR1B |= (1 << WGM12);  // Set the CTC mode
  TCCR1B |= (1 << CS10);   // Set prescaler to 1 (no prescaling)
  // Enable the Timer1 overflow interrupt
  TIMSK1 |= (1 << OCIE1A);
  Serial.begin(9600);
}

void loop() {
//
//  while(Serial.available() == 0){
//    delay(10);
//  }
//
//  int x = Serial.readString().toInt();
//
//  if (x == 1) {
//    open_drawer(outputPin);
//  }

  open_drawer(outputPin);
  
  delay(2000);
  
}

// Timer1 compare match ISR
ISR(TIMER1_COMPA_vect) {
  digitalWrite(outputPin, HIGH);
}

// Timer1 overflow ISR
ISR(TIMER1_OVF_vect) {
  digitalWrite(outputPin, LOW);
}

void open_drawer(int drawer_pin)
{

  dutyCycle = 20;
//  if (dutyCycle < 0) dutyCycle = 0;
//  if (dutyCycle > 100) dutyCycle = 100;
  OCR1B = map(dutyCycle, 0, 100, 0, 100);
  delay(10000);
  
  digitalWrite(drawer_pin, LOW);
}
